{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","disabled","DDBaseImplement","el","option","className","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","add","forDestroy","removeEventListener","dragTimeout","window","clearTimeout","dragging","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","name","target","nodeName","toLowerCase","find","skip","dragElement","dropElement","document","touchmove","touchend","preventDefault","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","parentElement","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","parentNode","dragElementOriginStyle","DDDraggable","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDDroppable","init","DDElement","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","get","dd","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","els","create","hosts","getElements","length","list","filter","d","DDGridStack","_itemRemoving","undefined","GridStack","prototype","_setupAcceptWidget","cellHeight","cellWidth","staticGrid","acceptWidgets","removable","onDrag","_temporaryRemoved","max","round","autoPosition","engine","nodeBoundFix","willItFit","_willFitPos","copyPos","_onStartMoving","_dragOrResize","canAccept","selector","maxRow","n","w","h","minW","minH","_leave","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","_initDD","_isTemp","removeAsSubGrid","wasAdded","placeholder","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","parentGridItem","nodes","_removeDD","subGrid","gridstack","removePositioningStyles","_writeAttr","styleInHead","_updateStyles","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","removableOptions","setupDragIn","dragInOptions","dragInDefaultOptions","noMove","disableDrag","noResize","disableResize","onStartMoving","dragOrResize","onEndMoving","_moving","_event","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","rect","moveNodeCheck","_skipDown","onParentResize","movable","val","enableMove","enableResize","_triggerEvent","doEnable","host","direction","moving","dir","_init","DDResizableHandle","prefix","userSelect","newRect","originalRect","scrolled","temporalRect","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","DDTouch","touchHandled","pointerLeaveTimeout","wasDragging","releasePointerCapture","pointerId","column","_float","float","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_fixCollisions","opt","sortNodes","nested","swap","area","didMove","newOpt","pack","moved","locked","moveNode","skip2","isIntercepted","collideAll","directionCollideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","sort","_updating","newY","prepareNode","_id","GridStackEngine","_idSeq","defaults","isNaN","before","_inColumnResize","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","some","triggerAddEvent","dup","_removeDOM","floor","box","removeDOM","removeAll","_layouts","clonedNode","changedPosConstrain","clone","canMove","c","content","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","areaIntercept","a1","a2","makeSubGrid","reduce","save","saveElement","len","layout","wl","l","removeInternalForSave","layoutsNodesChange","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","copy","index","minRow","rowAttr","toNumber","anyOpts","oneColumnSize","_alwaysShowResizeHandle","cloneDeep","gridDefaults","toBool","handleClass","itemClass","animate","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","rtl","closestUpByClass","_isAutoCellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","cbNodes","getGridItems","parseInt","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","console","error","initAll","grids","getGridElements","addGrid","doc","implementation","createHTMLDocument","innerHTML","class","children","load","registerEngine","_placeholder","placeholderChild","placeholderText","placeholderClass","addWidget","arguments","warn","id","isGridStackWidget","domAttr","_insertNotAppend","prepend","ops","nodeToAdd","saveContent","autoColumn","makeWidget","newItem","newItemOpt","update","_autoColumn","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","margin","origShow","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","item","forcePixel","rows","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","Array","from","setStatic","_removeStylesheet","removeAttribute","getFloat","getCellFromPixel","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","doAnimate","updateClass","m","k","changed","ddChanged","marginUnit","getMargin","elements","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","changedColumn","oneColumn","cellHeightThrottle","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","apply","args","info","oldAttr","querySelectorAll","getElementById","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","Boolean","Error","parseFloat","sources","source","doMinMax","removeEl","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"gridstack-all.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054\n    const skipMouseDown = ['input', 'textarea', 'button', 'select', 'option'];\n    const name = (e.target as HTMLElement).nodeName.toLowerCase();\n    if (skipMouseDown.find(skip => skip === name)) return true;\n\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    //\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent) {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 7.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 7.0.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition, dragInDefaultOptions, GridStackOptions } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  static get(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 31k (41k -> 72k)\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    dd.droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let parent = this.el.getBoundingClientRect();\r\n    let {top, left} = helper.getBoundingClientRect();\r\n    left -= parent.left;\r\n    top -= parent.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          dd.off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  dd.droppable(this.el, {\r\n    accept: (el: GridItemHTMLElement) => {\r\n      let node: GridStackNode = el.gridstackNode;\r\n      // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n      if (node?.grid === this) return true;\r\n      if (!this.opts.acceptWidgets) return false;\r\n      // check for accept method or class matching\r\n      let canAccept = true;\r\n      if (typeof this.opts.acceptWidgets === 'function') {\r\n        canAccept = this.opts.acceptWidgets(el);\r\n      } else {\r\n        let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n        canAccept = el.matches(selector);\r\n      }\r\n      // finally check to make sure we actually have space left #1571\r\n      if (canAccept && node && this.opts.maxRow) {\r\n        let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n        canAccept = this.engine.willItFit(n);\r\n      }\r\n      return canAccept;\r\n    }\r\n  })\r\n  /**\r\n   * entering our grid area\r\n   */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n      // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n      // console.log('dropover without leave'); // TEST\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore private read only on ourself\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      // console.log('dropover cloning node'); // TEST\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n      node._isExternal =  // DOM needs to be re-parented on a drop\r\n      node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      dd.on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n  /**\r\n   * Leaving our grid area...\r\n   */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n        // if we were created as temporary nested grid, go back to before state\r\n        if (this._isTemp) {\r\n          this.removeAsSubGrid(node);\r\n        }\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n  /**\r\n   * end - releasing the mouse\r\n   */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // console.log('drop delete _gridstackNodeOrig') // TEST\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n        // if it's an empty sub-grid, nuke it\r\n        if (oGrid.parentGridItem && !oGrid.engine.nodes.length) {\r\n          oGrid.removeAsSubGrid();\r\n        }\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      dd.off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        this._removeDD(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      let subGrid = (node.subGrid as GridStack)?.el?.gridstack; // set when actual sub-grid present\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n      if (subGrid) {\r\n        subGrid.parentGridItem = node;\r\n        if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n      }\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n        delete node.grid._isTemp;\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!dd.isDroppable(trashEl)) {\r\n      dd.droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, dragIn?: string, dragInOptions?: DDDragInOpt) {\r\n  if (dragInOptions?.pause !== undefined) {\r\n    DDManager.pauseDrag = dragInOptions.pause;\r\n  }\r\n\r\n  if (typeof dragIn === 'string') {\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    Utils.getElements(dragIn).forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  const noMove = node.noMove || this.opts.disableDrag;\r\n  const noResize = node.noResize || this.opts.disableResize;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || (noMove && noResize)) {\r\n    if (node._initDD) {\r\n      this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._event;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        this._removeDD(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        if (node._temporaryRemoved) {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        } else {\r\n          // move to new placeholder location\r\n          this._writePosAttr(target, node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  dd.draggable(el, noMove ? 'disable' : 'enable')\r\n    .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // console.log('_onStartMoving placeholder') // TEST\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // console.log('engine.addNode x=' + node.x); // TEST\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // console.log('leave delete _gridstackNodeOrig') // TEST\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData,\r\n  node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._event = event;\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** removes any drag&drop present (called during destroy) */\r\nGridStack.prototype._removeDD = function(this: GridStack, el: DDElementHost): GridStack {\r\n  dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n  if (el.gridstackNode) {\r\n    delete el.gridstackNode._initDD; // reset our DD init flag\r\n  }\r\n  delete el.ddElement;\r\n  return this;\r\n}\r\n\r\n","/**\n * dd-manager.ts 7.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent) {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent) {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent) {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _mouseOver(e: Event) {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _mouseOut(e: Event) {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 7.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = ( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent) {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent) {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled)  return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent) {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent) {\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent) {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent) {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 7.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, GridStackOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  public static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this.sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      Utils.removeInternalForSave(w, !saveElement);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 7.0.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions } from './types';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine) {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as any)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : gridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItem = (Utils.closestUpByClass(this.el, gridDefaults.itemClass) as GridItemHTMLElement)?.gridstackNode;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'grid-stack-instance-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create too\r\n    if (node.subGrid) {\r\n      this.makeSubGrid(node.el, undefined, undefined, false);\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if ((node.subGrid as GridStack)?.el) return node.subGrid as GridStack; // already done\r\n\r\n    ops = Utils.cloneDeep(ops || node.subGrid as GridStackOptions || {...this.opts.subGrid, children: undefined});\r\n    ops.subGrid = Utils.cloneDeep(ops); // carry nesting settings to next one down\r\n    node.subGrid = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n      newItem = doc.body.children[0] as HTMLElement;\r\n      newItem.appendChild(content);\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGrid;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n      content = doc.body.children[0] as HTMLElement;\r\n      node.el.appendChild(content);\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = (o as any)._alwaysShowResizeHandle;\r\n      delete (o as any)._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('min-height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.minHeight = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        changedColumn = true;\r\n        this.column(this.parentGridItem.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '7.0.0';\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in dd-gridstack.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in dd-gridstack.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  public _removeDD(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n\r\n/*\r\n * and include D&D by default, which override some methods here\r\n * TODO: while we can generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n */\r\nimport { DDGridStack } from './dd-gridstack'; // not called, but compiled in\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nexport * from './dd-gridstack';\r\n","/**\r\n * types.ts 7.0.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body' },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: '.grid-stack-item' },\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** different layout options when changing # of columns,\r\n * including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n */\r\nexport type ColumnOptions = 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\n\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\nexport type GridStackEventHandlerCallback = (event: Event, arg2?: GridItemHTMLElement | GridStackNode | GridStackNode[], newNode?: GridStackNode) => void;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    * this uses this condition on browser agent check:\r\n    `alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent )`\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid). old way to allow external items to be draggable. (default: undefined) */\r\n  dragIn?: string;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid).  old way to allow external items to be draggable. (default: undefined) */\r\n  dragInOptions?: DDDragInOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** id used to debug grid instance, not currently stored in DOM attributes */\r\n  id?: numberOrString;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us */\r\n  subGrid?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent resizing (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents moving (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** prevents being moved by others during their (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** widgets can have their own custom resize handles. For example 'e,w' will make that particular widget only resize east and west. See `resizable: {handles: string}` option */\r\n  resizeHandles?: string;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: numberOrString;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime */\r\n  subGrid?: GridStackOptions | GridStack;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: '.' + opts.itemClass) */\r\n  accept?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  // scroll?: boolean;\r\n  /** parent constraining where item can be dragged out from (default: null = no constrain) */\r\n  // containment?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping (ex: 'clone' or your own method) */\r\n  helper?: string | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to Grid instance */\r\n  grid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 7.0.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true) {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = document.querySelector(parent as string);\r\n    } else {\r\n      parentNode = parent as HTMLElement;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget) {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(324);\n"],"sourceRoot":""}
